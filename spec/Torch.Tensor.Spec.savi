:class Torch.Tensor.Spec
  :is Spec
  :const describes: "Torch.Tensor"

  // :it "validates that a given shape adds up to a given total element count"
  //   type = Torch.Tensor(I32)
  //   assert:       type.coerce_shape!(120, [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]
  //   assert error: type.coerce_shape!(120, [1, 2, 3, 4, 6])
  //   assert:       type.coerce_shape!(120, [2, 3, 4, 5])    == [2, 3, 4, 5]
  //   assert error: type.coerce_shape!(120, [1, 3, 4, 5])
  //   assert:       type.coerce_shape!(120, [6, 4, 5])       == [6, 4, 5]
  //   assert:       type.coerce_shape!(120, [6, 20])         == [6, 20]
  //   assert:       type.coerce_shape!(120, [120])           == [120]
  //   assert error: type.coerce_shape!(120, [121])
  //   assert error: type.coerce_shape!(120, [119])
  //   assert:       type.coerce_shape!(120, [1, 120])        == [1, 120]
  //   assert:       type.coerce_shape!(120, [1, 1, 120])     == [1, 1, 120]
  //   assert:       type.coerce_shape!(120, [120, 1])        == [120, 1]
  //   assert:       type.coerce_shape!(120, [120, 1, 1])     == [120, 1, 1]
  //   assert:       type.coerce_shape!(1, [])                == []
  //   assert error: type.coerce_shape!(0, [])
  //   assert error: type.coerce_shape!(2, [])
  //   assert:       type.coerce_shape!(1, [1])               == [1]
  //   assert error: type.coerce_shape!(0, [0]) // 0 is an invalid dimension size

  // :it "infers the missing dimension for a given total element count if possible"
  //   type = Torch.Tensor(I32)
  //   assert:       type.coerce_shape!(120, [-1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]
  //   assert:       type.coerce_shape!(120, [1, -1, 3, 4, 5]) == [1, 2, 3, 4, 5]
  //   assert:       type.coerce_shape!(120, [1, 2, -1, 4, 5]) == [1, 2, 3, 4, 5]
  //   assert:       type.coerce_shape!(120, [1, 2, 3, -1, 5]) == [1, 2, 3, 4, 5]
  //   assert:       type.coerce_shape!(120, [1, 2, 3, 4, -1]) == [1, 2, 3, 4, 5]
  //   assert error: type.coerce_shape!(120, [1, 2, 3, 3, -1])
  //   assert:       type.coerce_shape!(120, [-1])             == [120]
  //   assert error: type.coerce_shape!(120, [-1, -1]) // can't infer multiple

  // :it "creates a 1-dimensional tensor from an array"
  //   t = Torch.Tensor(I32).from_array([1, 2, 3, 4, 5])
  //   assert: t.element_byte_width == I32.byte_width
  //   assert: t.total_element_count == 5
  //   assert: t.into_array == [1, 2, 3, 4, 5]

  // :it "does basic scalar arithmetic"
  //   t = Torch.Tensor(I8).from_array([1, 2, 3, 4, 5])
  //     .add_scalar(1)
  //     .multiply_scalar(2)
  //     .subtract_scalar(1)
  //   assert: t.into_array == [3, 5, 7, 9, 11]

  :it "reshapes dimensions to form a new tensor"
    t = Torch.Tensor(I32).from_array([
      0,   1,  2,  3,  4,  5,  6,  7,  8,  9
      10, 11, 12, 13, 14, 15, 16, 17, 18, 19
      20, 21, 22, 23, 24, 25, 26, 27, 28, 29
    ])
    assert: t.dimension_count == 1

    assert error: t.reshape!([3, 3, 5])
    assert error: t.reshape!([3, 1, 5])

    assert no_error: (
      t2 = t.reshape!([3, 2, 5])
      assert: t.dimension_count == 1
      assert: t2.dimension_count == 3

      assert: t2.select(0, 0).into_array == [
        0, 1, 2, 3, 4
        5, 6, 7, 8, 9
      ]
      assert: t2.select(0, 1).into_array == [
        10, 11, 12, 13, 14
        15, 16, 17, 18, 19
      ]
      assert: t2.select(0, 2).into_array == [
        20, 21, 22, 23, 24
        25, 26, 27, 28, 29
      ]
      assert: t2.select(1, 0).into_array == [
        0,   1,  2,  3,  4
        10, 11, 12, 13, 14
        20, 21, 22, 23, 24
      ]
      assert: t2.select(1, 1).into_array == [
        5,   6,  7,  8,  9
        15, 16, 17, 18, 19
        25, 26, 27, 28, 29
      ]
      assert: t2.select(2, 0).into_array == [
        0,   5
        10, 15
        20, 25
      ]
      assert: t2.select(2, 1).into_array == [
        1,   6
        11, 16
        21, 26
      ]
      assert: t2.select(2, 2).into_array == [
        2,   7
        12, 17
        22, 27
      ]
      assert: t2.select(2, 3).into_array == [
        3,   8
        13, 18
        23, 28
      ]
      assert: t2.select(2, 4).into_array == [
        4,   9
        14, 19
        24, 29
      ]
    )
